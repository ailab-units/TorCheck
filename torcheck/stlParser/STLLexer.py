# Generated from STL.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,31,211,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,4,
        0,67,8,0,11,0,12,0,68,1,1,1,1,5,1,73,8,1,10,1,12,1,76,9,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,
        1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,
        1,24,1,24,1,25,1,25,1,25,1,26,4,26,141,8,26,11,26,12,26,142,1,26,
        5,26,146,8,26,10,26,12,26,149,9,26,1,26,5,26,152,8,26,10,26,12,26,
        155,9,26,1,26,3,26,158,8,26,1,26,1,26,4,26,162,8,26,11,26,12,26,
        163,1,26,3,26,167,8,26,1,26,4,26,170,8,26,11,26,12,26,171,1,26,3,
        26,175,8,26,1,27,1,27,3,27,179,8,27,1,27,4,27,182,8,27,11,27,12,
        27,183,1,28,1,28,5,28,188,8,28,10,28,12,28,191,9,28,1,29,1,29,1,
        30,1,30,1,30,1,30,5,30,199,8,30,10,30,12,30,202,9,30,1,30,1,30,1,
        31,1,31,3,31,208,8,31,1,31,1,31,0,0,32,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,0,57,
        28,59,29,61,30,63,31,1,0,9,1,0,97,122,1,0,65,90,2,0,48,57,65,90,
        2,0,69,69,101,101,2,0,43,43,45,45,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,2,0,10,10,13,13,2,0,9,9,32,32,225,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
        1,66,1,0,0,0,3,70,1,0,0,0,5,77,1,0,0,0,7,79,1,0,0,0,9,81,1,0,0,0,
        11,83,1,0,0,0,13,85,1,0,0,0,15,87,1,0,0,0,17,90,1,0,0,0,19,93,1,
        0,0,0,21,96,1,0,0,0,23,101,1,0,0,0,25,107,1,0,0,0,27,109,1,0,0,0,
        29,111,1,0,0,0,31,113,1,0,0,0,33,115,1,0,0,0,35,117,1,0,0,0,37,119,
        1,0,0,0,39,121,1,0,0,0,41,123,1,0,0,0,43,126,1,0,0,0,45,128,1,0,
        0,0,47,131,1,0,0,0,49,133,1,0,0,0,51,136,1,0,0,0,53,174,1,0,0,0,
        55,176,1,0,0,0,57,185,1,0,0,0,59,192,1,0,0,0,61,194,1,0,0,0,63,207,
        1,0,0,0,65,67,7,0,0,0,66,65,1,0,0,0,67,68,1,0,0,0,68,66,1,0,0,0,
        68,69,1,0,0,0,69,2,1,0,0,0,70,74,7,1,0,0,71,73,7,2,0,0,72,71,1,0,
        0,0,73,76,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,4,1,0,0,0,76,74,
        1,0,0,0,77,78,5,40,0,0,78,6,1,0,0,0,79,80,5,41,0,0,80,8,1,0,0,0,
        81,82,5,44,0,0,82,10,1,0,0,0,83,84,5,91,0,0,84,12,1,0,0,0,85,86,
        5,93,0,0,86,14,1,0,0,0,87,88,5,85,0,0,88,89,5,95,0,0,89,16,1,0,0,
        0,90,91,5,70,0,0,91,92,5,95,0,0,92,18,1,0,0,0,93,94,5,71,0,0,94,
        95,5,95,0,0,95,20,1,0,0,0,96,97,5,84,0,0,97,98,5,114,0,0,98,99,5,
        117,0,0,99,100,5,101,0,0,100,22,1,0,0,0,101,102,5,70,0,0,102,103,
        5,97,0,0,103,104,5,108,0,0,104,105,5,115,0,0,105,106,5,101,0,0,106,
        24,1,0,0,0,107,108,5,43,0,0,108,26,1,0,0,0,109,110,5,45,0,0,110,
        28,1,0,0,0,111,112,5,42,0,0,112,30,1,0,0,0,113,114,5,47,0,0,114,
        32,1,0,0,0,115,116,5,38,0,0,116,34,1,0,0,0,117,118,5,124,0,0,118,
        36,1,0,0,0,119,120,5,33,0,0,120,38,1,0,0,0,121,122,5,61,0,0,122,
        40,1,0,0,0,123,124,5,33,0,0,124,125,5,61,0,0,125,42,1,0,0,0,126,
        127,5,62,0,0,127,44,1,0,0,0,128,129,5,62,0,0,129,130,5,61,0,0,130,
        46,1,0,0,0,131,132,5,60,0,0,132,48,1,0,0,0,133,134,5,60,0,0,134,
        135,5,61,0,0,135,50,1,0,0,0,136,137,5,61,0,0,137,138,5,61,0,0,138,
        52,1,0,0,0,139,141,2,48,57,0,140,139,1,0,0,0,141,142,1,0,0,0,142,
        140,1,0,0,0,142,143,1,0,0,0,143,147,1,0,0,0,144,146,5,46,0,0,145,
        144,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,
        153,1,0,0,0,149,147,1,0,0,0,150,152,2,48,57,0,151,150,1,0,0,0,152,
        155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,157,1,0,0,0,155,
        153,1,0,0,0,156,158,3,55,27,0,157,156,1,0,0,0,157,158,1,0,0,0,158,
        175,1,0,0,0,159,161,5,46,0,0,160,162,2,48,57,0,161,160,1,0,0,0,162,
        163,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,
        167,3,55,27,0,166,165,1,0,0,0,166,167,1,0,0,0,167,175,1,0,0,0,168,
        170,2,48,57,0,169,168,1,0,0,0,170,171,1,0,0,0,171,169,1,0,0,0,171,
        172,1,0,0,0,172,173,1,0,0,0,173,175,3,55,27,0,174,140,1,0,0,0,174,
        159,1,0,0,0,174,169,1,0,0,0,175,54,1,0,0,0,176,178,7,3,0,0,177,179,
        7,4,0,0,178,177,1,0,0,0,178,179,1,0,0,0,179,181,1,0,0,0,180,182,
        2,48,57,0,181,180,1,0,0,0,182,183,1,0,0,0,183,181,1,0,0,0,183,184,
        1,0,0,0,184,56,1,0,0,0,185,189,7,5,0,0,186,188,7,6,0,0,187,186,1,
        0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,58,1,0,
        0,0,191,189,1,0,0,0,192,193,7,7,0,0,193,60,1,0,0,0,194,195,5,47,
        0,0,195,196,5,47,0,0,196,200,1,0,0,0,197,199,8,7,0,0,198,197,1,0,
        0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,203,1,0,
        0,0,202,200,1,0,0,0,203,204,6,30,0,0,204,62,1,0,0,0,205,208,7,8,
        0,0,206,208,3,59,29,0,207,205,1,0,0,0,207,206,1,0,0,0,208,209,1,
        0,0,0,209,210,6,31,0,0,210,64,1,0,0,0,17,0,68,72,74,142,147,153,
        157,163,166,171,174,178,183,189,200,207,1,0,1,0
    ]

class STLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PARAMETERS = 1
    SERIES = 2
    LPAR = 3
    RPAR = 4
    COMMA = 5
    LBRAT = 6
    RBRAT = 7
    U = 8
    F = 9
    G = 10
    TRUE = 11
    FALSE = 12
    PLUS = 13
    MINUS = 14
    MULT = 15
    DIV = 16
    AND = 17
    OR = 18
    NOT = 19
    EQ = 20
    NEQ = 21
    GT = 22
    GE = 23
    LT = 24
    LE = 25
    E = 26
    NUMBER = 27
    ID = 28
    NEWLINE = 29
    COMMENT = 30
    WS = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "','", "'['", "']'", "'U_'", "'F_'", "'G_'", "'True'", 
            "'False'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'!'", 
            "'='", "'!='", "'>'", "'>='", "'<'", "'<='", "'=='" ]

    symbolicNames = [ "<INVALID>",
            "PARAMETERS", "SERIES", "LPAR", "RPAR", "COMMA", "LBRAT", "RBRAT", 
            "U", "F", "G", "TRUE", "FALSE", "PLUS", "MINUS", "MULT", "DIV", 
            "AND", "OR", "NOT", "EQ", "NEQ", "GT", "GE", "LT", "LE", "E", 
            "NUMBER", "ID", "NEWLINE", "COMMENT", "WS" ]

    ruleNames = [ "PARAMETERS", "SERIES", "LPAR", "RPAR", "COMMA", "LBRAT", 
                  "RBRAT", "U", "F", "G", "TRUE", "FALSE", "PLUS", "MINUS", 
                  "MULT", "DIV", "AND", "OR", "NOT", "EQ", "NEQ", "GT", 
                  "GE", "LT", "LE", "E", "NUMBER", "EXPONENT", "ID", "NEWLINE", 
                  "COMMENT", "WS" ]

    grammarFileName = "STL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


